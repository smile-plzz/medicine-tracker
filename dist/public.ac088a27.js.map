{"mappings":"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","sources":["<anon>","src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', ()=>{\n    const medicineForm = document.getElementById('medicine-form');\n    const scheduleTableBody = document.querySelector('#schedule-table tbody');\n    const emptyScheduleMessage = document.getElementById('empty-schedule');\n    const downloadPdfButton = document.getElementById('download-pdf');\n    const resetScheduleButton = document.getElementById('reset-schedule');\n    resetScheduleButton.addEventListener('click', ()=>{\n        if (confirm('Are you sure you want to clear the entire schedule? This action cannot be undone.')) {\n            localStorage.removeItem('medicineSchedule');\n            medicines = [];\n            renderSchedule();\n        }\n    });\n    const patientNameInput = document.getElementById('patient-name');\n    const addTimeBtn = document.getElementById('add-time-btn');\n    const createTimeInput = ()=>{\n        const div = document.createElement('div');\n        div.className = 'flex items-center mb-2';\n        div.innerHTML = `\n            <input type=\"time\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\" name=\"medicine-time\" required>\n            <button type=\"button\" class=\"ml-2 text-red-500\" onclick=\"removeTimeInput(this)\">&times;</button>\n        `;\n        return div;\n    };\n    addTimeBtn.addEventListener('click', ()=>{\n        const timeInputs = document.getElementById('time-inputs');\n        timeInputs.appendChild(createTimeInput());\n    });\n    window.removeTimeInput = (button)=>{\n        button.parentElement.remove();\n    };\n    const medicineNameInput = document.getElementById('medicine-name');\n    const autocompleteSuggestions = document.getElementById('autocomplete-suggestions');\n    const debounce = (func, delay)=>{\n        let timeout;\n        return (...args)=>{\n            clearTimeout(timeout);\n            timeout = setTimeout(()=>func.apply(this, args), delay);\n        };\n    };\n    const fetchAutocompleteSuggestions = async (query)=>{\n        if (query.length < 3) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        try {\n            console.log('Fetching autocomplete suggestions for:', query);\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${query}`);\n            console.log('RxNav API response status:', response.status);\n            const data = await response.json();\n            console.log('RxNav API response data:', data);\n            const suggestions = data.drugGroup.drugList.drug?.map((d)=>d.name) || [];\n            console.log('Autocomplete suggestions:', suggestions);\n            renderAutocomplete(suggestions.slice(0, 5));\n        } catch (error) {\n            console.error('Failed to fetch suggestions:', error);\n        }\n    };\n    const renderAutocomplete = (suggestions)=>{\n        if (suggestions.length === 0) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        autocompleteSuggestions.innerHTML = suggestions.map((s)=>`<div class=\"p-2 hover:bg-gray-200 cursor-pointer\">${s}</div>`).join('');\n        autocompleteSuggestions.style.display = 'block';\n    };\n    autocompleteSuggestions.addEventListener('click', (e)=>{\n        if (e.target.tagName === 'DIV') {\n            medicineNameInput.value = e.target.textContent;\n            autocompleteSuggestions.style.display = 'none';\n        }\n    });\n    medicineNameInput.addEventListener('input', debounce(async ()=>{\n        await fetchAutocompleteSuggestions(medicineNameInput.value);\n    }, 300));\n    const patientDobInput = document.getElementById('patient-dob');\n    const patientContactInput = document.getElementById('patient-contact');\n    const patientAllergiesInput = document.getElementById('patient-allergies');\n    const doctorNameInput = document.getElementById('doctor-name');\n    const doctorContactInput = document.getElementById('doctor-contact');\n    const savePatientInfo = ()=>{\n        const patientInfo = {\n            name: patientNameInput.value,\n            dob: patientDobInput.value,\n            contact: patientContactInput.value,\n            allergies: patientAllergiesInput.value,\n            doctorName: doctorNameInput.value,\n            doctorContact: doctorContactInput.value\n        };\n        localStorage.setItem('patientInfo', JSON.stringify(patientInfo));\n    };\n    const loadPatientInfo = ()=>{\n        const savedPatientInfo = JSON.parse(localStorage.getItem('patientInfo'));\n        if (savedPatientInfo) {\n            patientNameInput.value = savedPatientInfo.name || '';\n            patientDobInput.value = savedPatientInfo.dob || '';\n            patientContactInput.value = savedPatientInfo.contact || '';\n            patientAllergiesInput.value = savedPatientInfo.allergies || '';\n            doctorNameInput.value = savedPatientInfo.doctorName || '';\n            doctorContactInput.value = savedPatientInfo.doctorContact || '';\n        }\n    };\n    patientNameInput.addEventListener('input', savePatientInfo);\n    patientDobInput.addEventListener('input', savePatientInfo);\n    patientContactInput.addEventListener('input', savePatientInfo);\n    patientAllergiesInput.addEventListener('input', savePatientInfo);\n    doctorNameInput.addEventListener('input', savePatientInfo);\n    doctorContactInput.addEventListener('input', savePatientInfo);\n    loadPatientInfo();\n    let medicines = JSON.parse(localStorage.getItem('medicineSchedule')) || [];\n    const renderSchedule = ()=>{\n        scheduleTableBody.innerHTML = '';\n        if (medicines.length === 0) {\n            emptyScheduleMessage.style.display = 'block';\n            downloadPdfButton.disabled = true;\n            return;\n        }\n        emptyScheduleMessage.style.display = 'none';\n        downloadPdfButton.disabled = false;\n        const scheduleItems = [];\n        medicines.forEach((medicine)=>{\n            medicine.times.forEach((time)=>{\n                scheduleItems.push({\n                    ...medicine,\n                    time\n                });\n            });\n        });\n        const sortedSchedule = scheduleItems.sort((a, b)=>a.time.localeCompare(b.time));\n        sortedSchedule.forEach((item)=>{\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td class=\"border px-4 py-2\">${item.time}</td>\n                <td class=\"border px-4 py-2\">${item.name}</td>\n                <td class=\"border px-4 py-2\">${item.dosage || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.instructions || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.genericName || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.category || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.usage || 'No information available.'}</td>\n                <td class=\"border px-4 py-2\">\n                    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"editMedicine('${item.id}')\">Edit</button>\n                    <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onclick=\"deleteMedicine('${item.id}')\">Delete</button>\n                </td>\n            `;\n            scheduleTableBody.appendChild(row);\n        });\n    };\n    const addMedicine = async (name, times, duration, dosage, instructions)=>{\n        const medicineInfo = await fetchMedicineInfo(name);\n        const newMedicine = {\n            id: self.crypto.randomUUID(),\n            name,\n            times,\n            duration,\n            dosage,\n            instructions,\n            info: medicineInfo\n        };\n        medicines.push(newMedicine);\n        localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n        renderSchedule();\n    };\n    const fetchMedicineInfo = async (medicineName)=>{\n        try {\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${medicineName}`);\n            const data = await response.json();\n            if (data.drugGroup.drugList && data.drugGroup.drugList.drug) {\n                const rxcui = data.drugGroup.drugList.drug[0].rxcui;\n                const propertiesResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${rxcui}/allproperties.json?prop=ALL`);\n                const propertiesData = await propertiesResponse.json();\n                const properties = propertiesData.propConceptGroup?.propConcept;\n                const usage = properties.find((p)=>p.propName === 'DEFINITIONAL_FEATURES')?.propValue || 'N/A';\n                const category = properties.find((p)=>p.propName === 'Drug Class')?.propValue || 'N/A';\n                const genericName = properties.find((p)=>p.propName === 'RxNorm Name')?.propValue || 'N/A';\n                return {\n                    usage,\n                    category,\n                    genericName\n                };\n            }\n        } catch (error) {\n            console.error('Failed to fetch medicine info:', error);\n        }\n        return null;\n    };\n    window.editMedicine = (id)=>{\n        const medicineToEdit = medicines.find((m)=>m.id === id);\n        if (medicineToEdit) {\n            document.getElementById('medicine-name').value = medicineToEdit.name;\n            document.getElementById('medicine-duration').value = medicineToEdit.duration;\n            document.getElementById('medicine-dosage').value = medicineToEdit.dosage || '';\n            document.getElementById('medicine-instructions').value = medicineToEdit.instructions || '';\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = '';\n            medicineToEdit.times.forEach((time)=>{\n                const timeInput = createTimeInput();\n                timeInput.querySelector('input[name=\"medicine-time\"]').value = time;\n                timeInputsContainer.appendChild(timeInput);\n            });\n            deleteMedicine(id);\n        }\n    };\n    window.deleteMedicine = (id)=>{\n        medicines = medicines.filter((m)=>m.id !== id);\n        localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n        renderSchedule();\n    };\n    medicineForm.addEventListener('submit', (e)=>{\n        e.preventDefault();\n        const medicineName = document.getElementById('medicine-name').value;\n        const timeInputs = document.querySelectorAll('input[name=\"medicine-time\"]');\n        const medicineTimes = Array.from(timeInputs).map((input)=>input.value).filter(Boolean);\n        const medicineDuration = document.getElementById('medicine-duration').value;\n        const medicineDosage = document.getElementById('medicine-dosage').value;\n        const medicineInstructions = document.getElementById('medicine-instructions').value;\n        if (medicineTimes.length > 0) {\n            console.log('Adding medicine:', {\n                name: medicineName,\n                times: medicineTimes,\n                duration: medicineDuration,\n                dosage: medicineDosage,\n                instructions: medicineInstructions\n            });\n            addMedicine(medicineName, medicineTimes, medicineDuration, medicineDosage, medicineInstructions);\n            medicineForm.reset();\n            console.log('Form reset after submission.');\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = ''; // Clear dynamic times\n            timeInputsContainer.appendChild(createTimeInput()); // Add back one\n        }\n    });\n    downloadPdfButton.addEventListener('click', ()=>{\n        const { jsPDF } = window.jspdf;\n        const doc = new jsPDF();\n        const patientName = patientNameInput.value || 'Patient';\n        const patientDob = patientDobInput.value;\n        const patientContact = patientContactInput.value;\n        const patientAllergies = patientAllergiesInput.value;\n        const doctorName = doctorNameInput.value;\n        const doctorContact = doctorContactInput.value;\n        let yOffset = 40;\n        // Patient Information\n        doc.setFontSize(14);\n        doc.text('Patient Information:', 20, yOffset);\n        doc.setFontSize(12);\n        yOffset += 7;\n        doc.text(`Name: ${patientName}`, 20, yOffset);\n        if (patientDob) {\n            yOffset += 7;\n            doc.text(`Date of Birth: ${patientDob}`, 20, yOffset);\n        }\n        if (patientContact) {\n            yOffset += 7;\n            doc.text(`Contact: ${patientContact}`, 20, yOffset);\n        }\n        if (patientAllergies) {\n            yOffset += 7;\n            doc.text(`Allergies: ${patientAllergies}`, 20, yOffset);\n        }\n        // Doctor Information\n        if (doctorName || doctorContact) {\n            yOffset += 15;\n            doc.setFontSize(14);\n            doc.text('Doctor Information:', 20, yOffset);\n            doc.setFontSize(12);\n            yOffset += 7;\n            if (doctorName) doc.text(`Name: ${doctorName}`, 20, yOffset);\n            if (doctorContact) {\n                yOffset += 7;\n                doc.text(`Contact: ${doctorContact}`, 20, yOffset);\n            }\n        }\n        yOffset += 15; // Space before table\n        const tableColumn = [\n            \"Time\",\n            \"Medicine\",\n            \"Dosage\",\n            \"Instructions\",\n            \"Generic Name\",\n            \"Category\",\n            \"Description\"\n        ];\n        const tableRows = [];\n        const scheduleItems = [];\n        medicines.forEach((medicine)=>{\n            medicine.times.forEach((time)=>{\n                scheduleItems.push({\n                    ...medicine,\n                    time\n                });\n            });\n        });\n        const sortedSchedule = scheduleItems.sort((a, b)=>a.time.localeCompare(b.time));\n        sortedSchedule.forEach((item)=>{\n            const medicineData = [\n                item.time,\n                item.name,\n                item.dosage || 'N/A',\n                item.instructions || 'N/A',\n                item.info?.genericName || 'N/A',\n                item.info?.category || 'N/A',\n                item.info?.usage || 'No information available.'\n            ];\n            tableRows.push(medicineData);\n        });\n        doc.autoTable(tableColumn, tableRows, {\n            startY: yOffset,\n            headStyles: {\n                fillColor: [\n                    67,\n                    56,\n                    202\n                ],\n                textColor: 255,\n                fontSize: 10,\n                fontStyle: 'bold'\n            },\n            bodyStyles: {\n                fontSize: 9\n            },\n            alternateRowStyles: {\n                fillColor: [\n                    240,\n                    240,\n                    240\n                ]\n            },\n            margin: {\n                top: 10,\n                right: 20,\n                bottom: 30,\n                left: 20\n            },\n            didDrawPage: function(data) {\n                // Header\n                doc.setFontSize(22);\n                doc.text('Medication Schedule', 105, 20, null, null, 'center');\n                doc.setFontSize(12);\n                doc.text(`Date: ${new Date().toLocaleDateString()}`, 180, 30, null, null, 'right');\n                // Footer\n                doc.setFontSize(8);\n                const pageHeight = doc.internal.pageSize.height;\n                doc.text('Disclaimer: Consult your doctor before making changes to your medication schedule.', 20, pageHeight - 20);\n                doc.text(`Generated on ${new Date().toLocaleString()}`, 20, pageHeight - 15);\n            }\n        });\n        doc.save(`medication_schedule_${new Date().toISOString().slice(0, 10)}.pdf`);\n    });\n    renderSchedule();\n});\n\n//# sourceMappingURL=public.ac088a27.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n    const medicineForm = document.getElementById('medicine-form');\n    const scheduleTableBody = document.querySelector('#schedule-table tbody');\n    const emptyScheduleMessage = document.getElementById('empty-schedule');\n    const downloadPdfButton = document.getElementById('download-pdf');\n    const resetScheduleButton = document.getElementById('reset-schedule');\n\n    resetScheduleButton.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear the entire schedule? This action cannot be undone.')) {\n            localStorage.removeItem('medicineSchedule');\n            medicines = [];\n            renderSchedule();\n        }\n    });\n    const patientNameInput = document.getElementById('patient-name');\n    const addTimeBtn = document.getElementById('add-time-btn');\n\n    const createTimeInput = () => {\n        const div = document.createElement('div');\n        div.className = 'flex items-center mb-2';\n        div.innerHTML = `\n            <input type=\"time\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\" name=\"medicine-time\" required>\n            <button type=\"button\" class=\"ml-2 text-red-500\" onclick=\"removeTimeInput(this)\">&times;</button>\n        `;\n        return div;\n    };\n\n    addTimeBtn.addEventListener('click', () => {\n        const timeInputs = document.getElementById('time-inputs');\n        timeInputs.appendChild(createTimeInput());\n    });\n\n    window.removeTimeInput = (button) => {\n        button.parentElement.remove();\n    };\n\n    const medicineNameInput = document.getElementById('medicine-name');\n    const autocompleteSuggestions = document.getElementById('autocomplete-suggestions');\n\n    const debounce = (func, delay) => {\n        let timeout;\n        return (...args) => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), delay);\n        };\n    };\n\n    const fetchAutocompleteSuggestions = async (query) => {\n        if (query.length < 3) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        try {\n            console.log('Fetching autocomplete suggestions for:', query);\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${query}`);\n            console.log('RxNav API response status:', response.status);\n            const data = await response.json();\n            console.log('RxNav API response data:', data);\n            const suggestions = data.drugGroup.drugList.drug?.map(d => d.name) || [];\n            console.log('Autocomplete suggestions:', suggestions);\n            renderAutocomplete(suggestions.slice(0, 5));\n        } catch (error) {\n            console.error('Failed to fetch suggestions:', error);\n        }\n    };\n\n    const renderAutocomplete = (suggestions) => {\n        if (suggestions.length === 0) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        autocompleteSuggestions.innerHTML = suggestions.map(s => `<div class=\"p-2 hover:bg-gray-200 cursor-pointer\">${s}</div>`).join('');\n        autocompleteSuggestions.style.display = 'block';\n    };\n\n    autocompleteSuggestions.addEventListener('click', (e) => {\n        if (e.target.tagName === 'DIV') {\n            medicineNameInput.value = e.target.textContent;\n            autocompleteSuggestions.style.display = 'none';\n        }\n    });\n\n        medicineNameInput.addEventListener('input', debounce(async () => {\n        await fetchAutocompleteSuggestions(medicineNameInput.value);\n    }, 300));\n\n    const patientDobInput = document.getElementById('patient-dob');\n    const patientContactInput = document.getElementById('patient-contact');\n    const patientAllergiesInput = document.getElementById('patient-allergies');\n    const doctorNameInput = document.getElementById('doctor-name');\n    const doctorContactInput = document.getElementById('doctor-contact');\n\n    const savePatientInfo = () => {\n        const patientInfo = {\n            name: patientNameInput.value,\n            dob: patientDobInput.value,\n            contact: patientContactInput.value,\n            allergies: patientAllergiesInput.value,\n            doctorName: doctorNameInput.value,\n            doctorContact: doctorContactInput.value\n        };\n        localStorage.setItem('patientInfo', JSON.stringify(patientInfo));\n    };\n\n    const loadPatientInfo = () => {\n        const savedPatientInfo = JSON.parse(localStorage.getItem('patientInfo'));\n        if (savedPatientInfo) {\n            patientNameInput.value = savedPatientInfo.name || '';\n            patientDobInput.value = savedPatientInfo.dob || '';\n            patientContactInput.value = savedPatientInfo.contact || '';\n            patientAllergiesInput.value = savedPatientInfo.allergies || '';\n            doctorNameInput.value = savedPatientInfo.doctorName || '';\n            doctorContactInput.value = savedPatientInfo.doctorContact || '';\n        }\n    };\n\n    patientNameInput.addEventListener('input', savePatientInfo);\n    patientDobInput.addEventListener('input', savePatientInfo);\n    patientContactInput.addEventListener('input', savePatientInfo);\n    patientAllergiesInput.addEventListener('input', savePatientInfo);\n    doctorNameInput.addEventListener('input', savePatientInfo);\n    doctorContactInput.addEventListener('input', savePatientInfo);\n\n    loadPatientInfo();\n\n    let medicines = JSON.parse(localStorage.getItem('medicineSchedule')) || [];\n\n    const renderSchedule = () => {\n        scheduleTableBody.innerHTML = '';\n        if (medicines.length === 0) {\n            emptyScheduleMessage.style.display = 'block';\n            downloadPdfButton.disabled = true;\n            return;\n        }\n        emptyScheduleMessage.style.display = 'none';\n        downloadPdfButton.disabled = false;\n\n        const scheduleItems = [];\n        medicines.forEach(medicine => {\n            medicine.times.forEach(time => {\n                scheduleItems.push({ ...medicine, time });\n            });\n        });\n\n        const sortedSchedule = scheduleItems.sort((a, b) => a.time.localeCompare(b.time));\n\n        sortedSchedule.forEach(item => {\n            const row = document.createElement('tr');\n            row.innerHTML = `\n                <td class=\"border px-4 py-2\">${item.time}</td>\n                <td class=\"border px-4 py-2\">${item.name}</td>\n                <td class=\"border px-4 py-2\">${item.dosage || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.instructions || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.genericName || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.category || 'N/A'}</td>\n                <td class=\"border px-4 py-2\">${item.info?.usage || 'No information available.'}</td>\n                <td class=\"border px-4 py-2\">\n                    <button class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2\" onclick=\"editMedicine('${item.id}')\">Edit</button>\n                    <button class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\" onclick=\"deleteMedicine('${item.id}')\">Delete</button>\n                </td>\n            `;\n            scheduleTableBody.appendChild(row);\n        });\n    };\n\n    const addMedicine = async (name, times, duration, dosage, instructions) => {\n        const medicineInfo = await fetchMedicineInfo(name);\n        const newMedicine = {\n            id: self.crypto.randomUUID(),\n            name,\n            times,\n            duration,\n            dosage,\n            instructions,\n            info: medicineInfo\n        };\n        medicines.push(newMedicine);\n        localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n        renderSchedule();\n    };\n\n    const fetchMedicineInfo = async (medicineName) => {\n        try {\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${medicineName}`);\n            const data = await response.json();\n            if (data.drugGroup.drugList && data.drugGroup.drugList.drug) {\n                const rxcui = data.drugGroup.drugList.drug[0].rxcui;\n                const propertiesResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${rxcui}/allproperties.json?prop=ALL`);\n                const propertiesData = await propertiesResponse.json();\n                const properties = propertiesData.propConceptGroup?.propConcept;\n                const usage = properties.find(p => p.propName === 'DEFINITIONAL_FEATURES')?.propValue || 'N/A';\n                const category = properties.find(p => p.propName === 'Drug Class')?.propValue || 'N/A';\n                const genericName = properties.find(p => p.propName === 'RxNorm Name')?.propValue || 'N/A';\n                return { usage, category, genericName };\n            }\n        } catch (error) {\n            console.error('Failed to fetch medicine info:', error);\n        }\n        return null;\n    };\n\n    window.editMedicine = (id) => {\n        const medicineToEdit = medicines.find(m => m.id === id);\n        if (medicineToEdit) {\n            document.getElementById('medicine-name').value = medicineToEdit.name;\n            document.getElementById('medicine-duration').value = medicineToEdit.duration;\n            document.getElementById('medicine-dosage').value = medicineToEdit.dosage || '';\n            document.getElementById('medicine-instructions').value = medicineToEdit.instructions || '';\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = '';\n            medicineToEdit.times.forEach(time => {\n                const timeInput = createTimeInput();\n                timeInput.querySelector('input[name=\"medicine-time\"]').value = time;\n                timeInputsContainer.appendChild(timeInput);\n            });\n            deleteMedicine(id);\n        }\n    };\n\n    window.deleteMedicine = (id) => {\n        medicines = medicines.filter(m => m.id !== id);\n        localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n        renderSchedule();\n    };\n\n    medicineForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const medicineName = document.getElementById('medicine-name').value;\n        const timeInputs = document.querySelectorAll('input[name=\"medicine-time\"]');\n        const medicineTimes = Array.from(timeInputs).map(input => input.value).filter(Boolean);\n        const medicineDuration = document.getElementById('medicine-duration').value;\n        const medicineDosage = document.getElementById('medicine-dosage').value;\n        const medicineInstructions = document.getElementById('medicine-instructions').value;\n        if (medicineTimes.length > 0) {\n            console.log('Adding medicine:', {\n                name: medicineName,\n                times: medicineTimes,\n                duration: medicineDuration,\n                dosage: medicineDosage,\n                instructions: medicineInstructions\n            });\n            addMedicine(medicineName, medicineTimes, medicineDuration, medicineDosage, medicineInstructions);\n            medicineForm.reset();\n            console.log('Form reset after submission.');\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = ''; // Clear dynamic times\n            timeInputsContainer.appendChild(createTimeInput()); // Add back one\n        }\n    });\n\n    downloadPdfButton.addEventListener('click', () => {\n        const { jsPDF } = window.jspdf;\n        const doc = new jsPDF();\n        const patientName = patientNameInput.value || 'Patient';\n        const patientDob = patientDobInput.value;\n        const patientContact = patientContactInput.value;\n        const patientAllergies = patientAllergiesInput.value;\n        const doctorName = doctorNameInput.value;\n        const doctorContact = doctorContactInput.value;\n\n        let yOffset = 40;\n\n        // Patient Information\n        doc.setFontSize(14);\n        doc.text('Patient Information:', 20, yOffset);\n        doc.setFontSize(12);\n        yOffset += 7;\n        doc.text(`Name: ${patientName}`, 20, yOffset);\n        if (patientDob) {\n            yOffset += 7;\n            doc.text(`Date of Birth: ${patientDob}`, 20, yOffset);\n        }\n        if (patientContact) {\n            yOffset += 7;\n            doc.text(`Contact: ${patientContact}`, 20, yOffset);\n        }\n        if (patientAllergies) {\n            yOffset += 7;\n            doc.text(`Allergies: ${patientAllergies}`, 20, yOffset);\n        }\n\n        // Doctor Information\n        if (doctorName || doctorContact) {\n            yOffset += 15;\n            doc.setFontSize(14);\n            doc.text('Doctor Information:', 20, yOffset);\n            doc.setFontSize(12);\n            yOffset += 7;\n            if (doctorName) {\n                doc.text(`Name: ${doctorName}`, 20, yOffset);\n            }\n            if (doctorContact) {\n                yOffset += 7;\n                doc.text(`Contact: ${doctorContact}`, 20, yOffset);\n            }\n        }\n\n        yOffset += 15; // Space before table\n\n        const tableColumn = [\"Time\", \"Medicine\", \"Dosage\", \"Instructions\", \"Generic Name\", \"Category\", \"Description\"];\n        const tableRows = [];\n\n        const scheduleItems = [];\n        medicines.forEach(medicine => {\n            medicine.times.forEach(time => {\n                scheduleItems.push({ ...medicine, time });\n            });\n        });\n\n        const sortedSchedule = scheduleItems.sort((a, b) => a.time.localeCompare(b.time));\n\n        sortedSchedule.forEach(item => {\n            const medicineData = [\n                item.time,\n                item.name,\n                item.dosage || 'N/A',\n                item.instructions || 'N/A',\n                item.info?.genericName || 'N/A',\n                item.info?.category || 'N/A',\n                item.info?.usage || 'No information available.'\n            ];\n            tableRows.push(medicineData);\n        });\n\n        doc.autoTable(tableColumn, tableRows, {\n            startY: yOffset,\n            headStyles: { fillColor: [67, 56, 202], textColor: 255, fontSize: 10, fontStyle: 'bold' },\n            bodyStyles: { fontSize: 9 },\n            alternateRowStyles: { fillColor: [240, 240, 240] },\n            margin: { top: 10, right: 20, bottom: 30, left: 20 },\n            didDrawPage: function (data) {\n                // Header\n                doc.setFontSize(22);\n                doc.text('Medication Schedule', 105, 20, null, null, 'center');\n                doc.setFontSize(12);\n                doc.text(`Date: ${new Date().toLocaleDateString()}`, 180, 30, null, null, 'right');\n\n                // Footer\n                doc.setFontSize(8);\n                const pageHeight = doc.internal.pageSize.height;\n                doc.text('Disclaimer: Consult your doctor before making changes to your medication schedule.', 20, pageHeight - 20);\n                doc.text(`Generated on ${new Date().toLocaleString()}`, 20, pageHeight - 15);\n            }\n        });\n\n        doc.save(`medication_schedule_${new Date().toISOString().slice(0, 10)}.pdf`);\n    });\n\n    renderSchedule();\n});"],"names":["document","addEventListener","medicineForm","getElementById","scheduleTableBody","querySelector","emptyScheduleMessage","downloadPdfButton","resetScheduleButton","confirm","localStorage","removeItem","medicines","renderSchedule","patientNameInput","addTimeBtn","createTimeInput","div","createElement","className","innerHTML","timeInputs","appendChild","window","removeTimeInput","button","parentElement","remove","medicineNameInput","autocompleteSuggestions","debounce","func","delay","timeout","args","clearTimeout","setTimeout","apply","fetchAutocompleteSuggestions","query","length","style","display","console","log","response","fetch","status","data","json","suggestions","drugGroup","drugList","drug","map","d","name","renderAutocomplete","slice","error","s","join","e","target","tagName","value","textContent","patientDobInput","patientContactInput","patientAllergiesInput","doctorNameInput","doctorContactInput","savePatientInfo","patientInfo","dob","contact","allergies","doctorName","doctorContact","setItem","JSON","stringify","loadPatientInfo","savedPatientInfo","parse","getItem","disabled","scheduleItems","forEach","medicine","times","time","push","sortedSchedule","sort","a","b","localeCompare","item","row","dosage","instructions","info","genericName","category","usage","id","addMedicine","duration","medicineInfo","fetchMedicineInfo","newMedicine","self","crypto","randomUUID","medicineName","rxcui","propertiesResponse","propertiesData","properties","propConceptGroup","propConcept","find","p","propName","propValue","editMedicine","medicineToEdit","m","timeInputsContainer","timeInput","deleteMedicine","filter","preventDefault","medicineTimes","Array","from","querySelectorAll","input","Boolean","medicineDuration","medicineDosage","medicineInstructions","reset","jsPDF","jspdf","doc","patientName","patientDob","patientContact","patientAllergies","yOffset","setFontSize","text","tableRows","medicineData","autoTable","startY","headStyles","fillColor","textColor","fontSize","fontStyle","bodyStyles","alternateRowStyles","margin","top","right","bottom","left","didDrawPage","Date","toLocaleDateString","pageHeight","internal","pageSize","height","toLocaleString","save","toISOString"],"version":3,"file":"public.ac088a27.js.map"}