{"mappings":"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","sources":["src/main.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n    const medicineForm = document.getElementById('medicine-form');\n    const scheduleTableBody = document.querySelector('#schedule-table tbody');\n    const emptyScheduleMessage = document.getElementById('empty-schedule');\n    const downloadPdfButton = document.getElementById('download-pdf');\n    const resetScheduleButton = document.getElementById('reset-schedule');\n\n    resetScheduleButton.addEventListener('click', () => {\n        if (confirm('Are you sure you want to clear the entire schedule? This action cannot be undone.')) {\n            localStorage.removeItem('medicineSchedule');\n            medicines = [];\n            renderSchedule();\n        }\n    });\n    const patientNameInput = document.getElementById('patient-name');\n    const addTimeBtn = document.getElementById('add-time-btn');\n\n    const createTimeInput = () => {\n        const div = document.createElement('div');\n        div.className = 'flex items-center mb-2';\n        div.innerHTML = `\n            <input type=\"time\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\" name=\"medicine-time\" required>\n            <button type=\"button\" class=\"ml-2 text-red-500\" onclick=\"removeTimeInput(this)\">&times;</button>\n        `;\n        return div;\n    };\n\n    addTimeBtn.addEventListener('click', () => {\n        const timeInputs = document.getElementById('time-inputs');\n        timeInputs.appendChild(createTimeInput());\n    });\n\n    window.removeTimeInput = (button) => {\n        button.parentElement.remove();\n    };\n\n    const medicineNameInput = document.getElementById('medicine-name');\n    const autocompleteSuggestions = document.getElementById('autocomplete-suggestions');\n\n    const debounce = (func, delay) => {\n        let timeout;\n        return (...args) => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => func.apply(this, args), delay);\n        };\n    };\n\n    const fetchAutocompleteSuggestions = async (query) => {\n        if (query.length < 3) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        try {\n            console.log('Fetching autocomplete suggestions for:', query);\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${query}`);\n            console.log('RxNav API response status:', response.status);\n            const data = await response.json();\n            console.log('RxNav API full response data:', data);\n\n            if (!data.drugGroup) {\n                console.warn('RxNav API response: drugGroup is undefined', data);\n                autocompleteSuggestions.style.display = 'none';\n                return;\n            }\n            console.log('RxNav API drugGroup:', data.drugGroup);\n\n            if (!data.drugGroup.drugList) {\n                console.warn('RxNav API response: drugList is undefined', data.drugGroup);\n                autocompleteSuggestions.style.display = 'none';\n                return;\n            }\n            console.log('RxNav API drugList:', data.drugGroup.drugList);\n\n            const suggestions = data.drugGroup.drugList.drug?.map(d => d.name) || [];\n            console.log('Autocomplete suggestions:', suggestions);\n            renderAutocomplete(suggestions.slice(0, 5));\n        } catch (error) {\n            console.error('Failed to fetch suggestions:', error);\n        }\n    };\n\n    const renderAutocomplete = (suggestions) => {\n        if (suggestions.length === 0) {\n            autocompleteSuggestions.style.display = 'none';\n            return;\n        }\n        autocompleteSuggestions.innerHTML = suggestions.map(s => `<div class=\"p-2 hover:bg-gray-200 cursor-pointer\">${s}</div>`).join('');\n        autocompleteSuggestions.style.display = 'block';\n    };\n\n    autocompleteSuggestions.addEventListener('click', (e) => {\n        if (e.target.tagName === 'DIV') {\n            medicineNameInput.value = e.target.textContent;\n            autocompleteSuggestions.style.display = 'none';\n        }\n    });\n\n        medicineNameInput.addEventListener('input', debounce(async () => {\n        await fetchAutocompleteSuggestions(medicineNameInput.value);\n    }, 300));\n\n    const patientDobInput = document.getElementById('patient-dob');\n    const patientContactInput = document.getElementById('patient-contact');\n    const patientAllergiesInput = document.getElementById('patient-allergies');\n    const doctorNameInput = document.getElementById('doctor-name');\n    const doctorContactInput = document.getElementById('doctor-contact');\n\n    const savePatientInfo = () => {\n        const patientInfo = {\n            name: patientNameInput.value,\n            dob: patientDobInput.value,\n            contact: patientContactInput.value,\n            allergies: patientAllergiesInput.value,\n            doctorName: doctorNameInput.value,\n            doctorContact: doctorContactInput.value\n        };\n        localStorage.setItem('patientInfo', JSON.stringify(patientInfo));\n    };\n\n    const loadPatientInfo = () => {\n        const savedPatientInfo = JSON.parse(localStorage.getItem('patientInfo'));\n        if (savedPatientInfo) {\n            patientNameInput.value = savedPatientInfo.name || '';\n            patientDobInput.value = savedPatientInfo.dob || '';\n            patientContactInput.value = savedPatientInfo.contact || '';\n            patientAllergiesInput.value = savedPatientInfo.allergies || '';\n            doctorNameInput.value = savedPatientInfo.doctorName || '';\n            doctorContactInput.value = savedPatientInfo.doctorContact || '';\n        }\n    };\n\n    patientNameInput.addEventListener('input', savePatientInfo);\n    patientDobInput.addEventListener('input', savePatientInfo);\n    patientContactInput.addEventListener('input', savePatientInfo);\n    patientAllergiesInput.addEventListener('input', savePatientInfo);\n    doctorNameInput.addEventListener('input', savePatientInfo);\n    doctorContactInput.addEventListener('input', savePatientInfo);\n\n    loadPatientInfo();\n\n    let medicines = JSON.parse(localStorage.getItem('medicineSchedule')) || [];\n\n    const renderSchedule = () => {\n        scheduleTableBody.innerHTML = '';\n        if (medicines.length === 0) {\n            emptyScheduleMessage.style.display = 'block';\n            downloadPdfButton.disabled = true;\n            return;\n        }\n        emptyScheduleMessage.style.display = 'none';\n        downloadPdfButton.disabled = false;\n\n        const scheduleItems = [];\n        medicines.forEach(medicine => {\n            medicine.times.forEach(time => {\n                scheduleItems.push({ ...medicine, time });\n            });\n        });\n\n        const sortedSchedule = scheduleItems.sort((a, b) => a.time.localeCompare(b.time));\n\n        sortedSchedule.forEach(item => {\n            const row = document.createElement('tr');\n            row.className = 'hover:bg-gray-50';\n            row.innerHTML = `\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900\">${item.time}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm text-gray-900\">${item.name}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">${item.dosage || 'N/A'}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">${item.instructions || 'N/A'}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">${item.info?.genericName || 'N/A'}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-sm text-gray-500\">${item.info?.category || 'N/A'}</td>\n                <td class=\"px-4 py-2 text-sm text-gray-500\">${item.info?.usage || 'No information available.'}</td>\n                <td class=\"px-4 py-2 whitespace-nowrap text-right text-sm font-medium\">\n                    <button class=\"text-indigo-600 hover:text-indigo-900 mr-2\" onclick=\"editMedicine('${item.id}')\" aria-label=\"Edit medicine\"><i class=\"fas fa-edit\"></i> Edit</button>\n                    <button class=\"text-red-600 hover:text-red-900\" onclick=\"deleteMedicine('${item.id}')\" aria-label=\"Delete medicine\"><i class=\"fas fa-trash\"></i> Delete</button>\n                </td>\n            `;\n            scheduleTableBody.appendChild(row);\n        });\n    };\n\n    const addMedicine = async (name, times, duration, dosage, instructions) => {\n        console.log('Attempting to add medicine:', { name, times, duration, dosage, instructions });\n        try {\n            const medicineInfo = await fetchMedicineInfo(name);\n            const newMedicine = {\n                id: self.crypto.randomUUID(),\n                name,\n                times,\n                duration,\n                dosage,\n                instructions,\n                info: medicineInfo\n            };\n            medicines.push(newMedicine);\n            try {\n                localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n                console.log('Medicine schedule saved to localStorage.');\n            } catch (lsError) {\n                console.error('Failed to save medicine schedule to localStorage:', lsError);\n            }\n            renderSchedule();\n            console.log('Medicine added and schedule rendered.');\n        } catch (error) {\n            console.error('Error in addMedicine:', error);\n        }\n    };\n\n    const fetchMedicineInfo = async (medicineName) => {\n        console.log('Fetching medicine info for:', medicineName);\n        try {\n            const response = await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${medicineName}`);\n            console.log('RxNav drugs API response status:', response.status);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            console.log('RxNav drugs API response data:', data);\n\n            if (data.drugGroup.drugList && data.drugGroup.drugList.drug) {\n                const rxcui = data.drugGroup.drugList.drug[0].rxcui;\n                console.log('Found RxCUI:', rxcui);\n                const propertiesResponse = await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${rxcui}/allproperties.json?prop=ALL`);\n                console.log('RxNav properties API response status:', propertiesResponse.status);\n                if (!propertiesResponse.ok) {\n                    throw new Error(`HTTP error! status: ${propertiesResponse.status}`);\n                }\n                const propertiesData = await propertiesResponse.json();\n                console.log('RxNav properties API response data:', propertiesData);\n\n                const properties = propertiesData.propConceptGroup?.propConcept;\n                const usage = properties?.find(p => p.propName === 'DEFINITIONAL_FEATURES')?.propValue || 'N/A';\n                const category = properties?.find(p => p.propName === 'Drug Class')?.propValue || 'N/A';\n                const genericName = properties?.find(p => p.propName === 'RxNorm Name')?.propValue || 'N/A';\n                console.log('Fetched medicine info:', { usage, category, genericName });\n                return { usage, category, genericName };\n            } else {\n                console.log('No drug found for:', medicineName);\n            }\n        } catch (error) {\n            console.error('Failed to fetch medicine info:', error);\n        }\n        return null;\n    };\n\n    window.editMedicine = (id) => {\n        const medicineToEdit = medicines.find(m => m.id === id);\n        if (medicineToEdit) {\n            document.getElementById('medicine-name').value = medicineToEdit.name;\n            document.getElementById('medicine-duration').value = medicineToEdit.duration;\n            document.getElementById('medicine-dosage').value = medicineToEdit.dosage || '';\n            document.getElementById('medicine-instructions').value = medicineToEdit.instructions || '';\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = '';\n            medicineToEdit.times.forEach(time => {\n                const timeInput = createTimeInput();\n                timeInput.querySelector('input[name=\"medicine-time\"]').value = time;\n                timeInputsContainer.appendChild(timeInput);\n            });\n            deleteMedicine(id);\n        }\n    };\n\n    window.deleteMedicine = (id) => {\n        medicines = medicines.filter(m => m.id !== id);\n        localStorage.setItem('medicineSchedule', JSON.stringify(medicines));\n        renderSchedule();\n    };\n\n    medicineForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const medicineName = document.getElementById('medicine-name').value;\n        const timeInputs = document.querySelectorAll('input[name=\"medicine-time\"]');\n        const medicineTimes = Array.from(timeInputs).map(input => input.value).filter(Boolean);\n        const medicineDuration = document.getElementById('medicine-duration').value;\n        const medicineDosage = document.getElementById('medicine-dosage').value;\n        const medicineInstructions = document.getElementById('medicine-instructions').value;\n        if (medicineTimes.length > 0) {\n            console.log('Adding medicine:', {\n                name: medicineName,\n                times: medicineTimes,\n                duration: medicineDuration,\n                dosage: medicineDosage,\n                instructions: medicineInstructions\n            });\n            addMedicine(medicineName, medicineTimes, medicineDuration, medicineDosage, medicineInstructions);\n            medicineForm.reset();\n            console.log('Form reset after submission.');\n            const timeInputsContainer = document.getElementById('time-inputs');\n            timeInputsContainer.innerHTML = ''; // Clear dynamic times\n            timeInputsContainer.appendChild(createTimeInput()); // Add back one\n        }\n    });\n\n    downloadPdfButton.addEventListener('click', () => {\n        const { jsPDF } = window.jspdf;\n        const doc = new jsPDF();\n\n        // Add Title\n        doc.setFontSize(22);\n        doc.text('Medication Schedule', 105, 20, null, null, 'center');\n        doc.setFontSize(12);\n        doc.text(`Date: ${new Date().toLocaleDateString()}`, 180, 30, null, null, 'right');\n\n        const patientName = patientNameInput.value || 'Patient';\n        const patientDob = patientDobInput.value;\n        const patientContact = patientContactInput.value;\n        const patientAllergies = patientAllergiesInput.value;\n        const doctorName = doctorNameInput.value;\n        const doctorContact = doctorContactInput.value;\n\n        let yOffset = 40;\n\n        // Patient Information\n        doc.setFontSize(14);\n        doc.text('Patient Information:', 20, yOffset);\n        doc.setFontSize(12);\n        yOffset += 10;\n        doc.setFont('helvetica', 'bold');\n        doc.text('Name:', 20, yOffset);\n        doc.setFont('helvetica', 'normal');\n        doc.text(patientName, 50, yOffset);\n        if (patientDob) {\n            yOffset += 7;\n            doc.setFont('helvetica', 'bold');\n            doc.text('Date of Birth:', 20, yOffset);\n            doc.setFont('helvetica', 'normal');\n            doc.text(patientDob, 50, yOffset);\n        }\n        if (patientContact) {\n            yOffset += 7;\n            doc.setFont('helvetica', 'bold');\n            doc.text('Contact:', 20, yOffset);\n            doc.setFont('helvetica', 'normal');\n            doc.text(patientContact, 50, yOffset);\n        }\n        if (patientAllergies) {\n            yOffset += 7;\n            doc.setFont('helvetica', 'bold');\n            doc.text('Allergies:', 20, yOffset);\n            doc.setFont('helvetica', 'normal');\n            doc.text(patientAllergies, 50, yOffset);\n        }\n\n        // Doctor Information\n        if (doctorName || doctorContact) {\n            yOffset += 15;\n            doc.setFontSize(14);\n            doc.setFont('helvetica', 'bold');\n            doc.text('Doctor Information:', 20, yOffset);\n            doc.setFontSize(12);\n            yOffset += 10;\n            if (doctorName) {\n                doc.setFont('helvetica', 'bold');\n                doc.text('Name:', 20, yOffset);\n                doc.setFont('helvetica', 'normal');\n                doc.text(doctorName, 50, yOffset);\n            }\n            if (doctorContact) {\n                yOffset += 7;\n                doc.setFont('helvetica', 'bold');\n                doc.text('Contact:', 20, yOffset);\n                doc.setFont('helvetica', 'normal');\n                doc.text(doctorContact, 50, yOffset);\n            }\n        }\n\n        yOffset += 15; // Space before table\n\n        const tableColumn = [\"Time\", \"Medicine\", \"Dosage\", \"Instructions\", \"Duration (days)\", \"Generic Name\", \"Category\", \"Description\"];\n        const tableRows = [];\n\n        const scheduleItems = [];\n        medicines.forEach(medicine => {\n            medicine.times.forEach(time => {\n                scheduleItems.push({ ...medicine, time });\n            });\n        });\n\n        const sortedSchedule = scheduleItems.sort((a, b) => a.time.localeCompare(b.time));\n\n        sortedSchedule.forEach(item => {\n            const medicineData = [\n                item.time,\n                item.name,\n                item.dosage || 'N/A',\n                item.instructions || 'N/A',\n                item.duration || 'N/A',\n                item.info?.genericName || 'N/A',\n                item.info?.category || 'N/A',\n                item.info?.usage || 'No information available.'\n            ];\n            tableRows.push(medicineData);\n        });\n\n        doc.autoTable({\n            head: [tableColumn],\n            body: tableRows,\n            startY: yOffset,\n            startY: yOffset,\n            headStyles: { fillColor: [67, 56, 202], textColor: 255, fontSize: 10, fontStyle: 'bold' },\n            bodyStyles: { fontSize: 9 },\n            alternateRowStyles: { fillColor: [240, 240, 240] },\n            margin: { top: 10, right: 20, bottom: 30, left: 20 },\n            didDrawPage: function (data) {\n                // Footer\n                doc.setFontSize(8);\n                const pageHeight = doc.internal.pageSize.height;\n                doc.text('Disclaimer: Consult your doctor before making changes to your medication schedule.', 20, pageHeight - 20);\n                doc.text(`Generated on ${new Date().toLocaleString()}`, 20, pageHeight - 15);\n            }\n        });\n\n        doc.save(`medication_schedule_${new Date().toISOString().slice(0, 10)}.pdf`);\n    });\n\n    renderSchedule();\n});"],"names":[],"version":3,"file":"public.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}