document.addEventListener("DOMContentLoaded",()=>{let e=document.getElementById("medicine-form"),t=document.querySelector("#schedule-table tbody"),n=document.getElementById("empty-schedule"),i=document.getElementById("download-pdf");document.getElementById("reset-schedule").addEventListener("click",()=>{confirm("Are you sure you want to clear the entire schedule? This action cannot be undone.")&&(localStorage.removeItem("medicineSchedule"),p=[],g())});let d=document.getElementById("patient-name"),o=document.getElementById("add-time-btn"),a=()=>{let e=document.createElement("div");return e.className="flex items-center mb-2",e.innerHTML=`
            <input type="time" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" name="medicine-time" required>
            <button type="button" class="ml-2 text-red-500" onclick="removeTimeInput(this)">&times;</button>
        `,e};o.addEventListener("click",()=>{document.getElementById("time-inputs").appendChild(a())}),window.removeTimeInput=e=>{e.parentElement.remove()};let r=document.getElementById("medicine-name"),l=document.getElementById("autocomplete-suggestions"),c=(e,t)=>{let n;return(...i)=>{clearTimeout(n),n=setTimeout(()=>e.apply(this,i),t)}},m=async e=>{if(e.length<3){l.style.display="none";return}try{let t=await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${e}`),n=await t.json(),i=n.drugGroup.drugList.drug?.map(e=>e.name)||[];s(i.slice(0,5))}catch(e){console.error("Failed to fetch suggestions:",e)}},s=e=>{if(0===e.length){l.style.display="none";return}l.innerHTML=e.map(e=>`<div class="p-2 hover:bg-gray-200 cursor-pointer">${e}</div>`).join(""),l.style.display="block"};l.addEventListener("click",e=>{"DIV"===e.target.tagName&&(r.value=e.target.textContent,l.style.display="none")}),r.addEventListener("input",c(async()=>{await m(r.value)},300)),d.addEventListener("input",()=>{localStorage.setItem("patientName",d.value)});let u=localStorage.getItem("patientName");u&&(d.value=u);let p=JSON.parse(localStorage.getItem("medicineSchedule"))||[],g=()=>{if(t.innerHTML="",0===p.length){n.style.display="block",i.disabled=!0;return}n.style.display="none",i.disabled=!1;let e=[];p.forEach(t=>{t.times.forEach(n=>{e.push({...t,time:n})})}),e.sort((e,t)=>e.time.localeCompare(t.time)).forEach(e=>{let n=document.createElement("tr");n.innerHTML=`
                <td class="border px-4 py-2">${e.time}</td>
                <td class="border px-4 py-2">${e.name}</td>
                <td class="border px-4 py-2">${e.info?.genericName||"N/A"}</td>
                <td class="border px-4 py-2">${e.info?.category||"N/A"}</td>
                <td class="border px-4 py-2">${e.info?.usage||"No information available."}</td>
                <td class="border px-4 py-2">
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2" onclick="editMedicine('${e.id}')">Edit</button>
                    <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded" onclick="deleteMedicine('${e.id}')">Delete</button>
                </td>
            `,t.appendChild(n)})},y=async(e,t,n)=>{let i=await h(e),d={id:self.crypto.randomUUID(),name:e,times:t,duration:n,info:i};p.push(d),localStorage.setItem("medicineSchedule",JSON.stringify(p)),g()},h=async e=>{try{let t=await fetch(`https://rxnav.nlm.nih.gov/REST/drugs.json?name=${e}`),n=await t.json();if(n.drugGroup.drugList&&n.drugGroup.drugList.drug){let e=n.drugGroup.drugList.drug[0].rxcui,t=await fetch(`https://rxnav.nlm.nih.gov/REST/rxcui/${e}/allproperties.json?prop=ALL`),i=(await t.json()).propConceptGroup.propConcept,d=i.find(e=>"DEFINITIONAL_FEATURES"===e.propName)?.propValue||"N/A",o=i.find(e=>"Drug Class"===e.propName)?.propValue||"N/A",a=i.find(e=>"RxNorm Name"===e.propName)?.propValue||"N/A";return{usage:d,category:o,genericName:a}}}catch(e){console.error("Failed to fetch medicine info:",e)}return null};window.editMedicine=e=>{let t=p.find(t=>t.id===e);if(t){document.getElementById("medicine-name").value=t.name,document.getElementById("medicine-duration").value=t.duration;let n=document.getElementById("time-inputs");n.innerHTML="",t.times.forEach(e=>{let t=a();t.querySelector('input[name="medicine-time"]').value=e,n.appendChild(t)}),deleteMedicine(e)}},window.deleteMedicine=e=>{p=p.filter(t=>t.id!==e),localStorage.setItem("medicineSchedule",JSON.stringify(p)),g()},e.addEventListener("submit",t=>{t.preventDefault();let n=document.getElementById("medicine-name").value,i=Array.from(document.querySelectorAll('input[name="medicine-time"]')).map(e=>e.value).filter(Boolean),d=document.getElementById("medicine-duration").value;if(i.length>0){y(n,i,d),e.reset();let t=document.getElementById("time-inputs");t.innerHTML="",t.appendChild(a())}}),i.addEventListener("click",()=>{let{jsPDF:e}=window.jspdf,t=new e,n=d.value||"Patient";t.text("Medication Schedule",20,20),t.text(`Patient: ${n}`,20,30),t.text(`Date: ${new Date().toLocaleDateString()}`,20,40);let i=[],o=[];p.forEach(e=>{e.times.forEach(t=>{o.push({...e,time:t})})}),o.sort((e,t)=>e.time.localeCompare(t.time)).forEach(e=>{let t=[e.time,e.name,e.info?.genericName||"N/A",e.info?.category||"N/A",e.info?.usage||"No information available."];i.push(t)}),t.autoTable(["Time","Medicine","Generic Name","Category","Description"],i,{startY:50}),t.save(`medication_schedule_${new Date().toISOString().slice(0,10)}.pdf`)}),g()});
//# sourceMappingURL=public.ffab3471.js.map
